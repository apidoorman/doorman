import io
import os
import time
import pytest

from config import ENABLE_GRPC


pytestmark = pytest.mark.skipif(not ENABLE_GRPC, reason='gRPC test disabled (set DOORMAN_TEST_GRPC=1 to enable)')


PROTO_TEMPLATE = """
syntax = "proto3";

package {pkg};

service Greeter {
  rpc Hello (HelloRequest) returns (HelloReply) {}
}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}
"""


def _start_grpc_server(port: int):
    import grpc
    from concurrent import futures

    class GreeterServicer:
        def Hello(self, request, context):  # type: ignore
            # request has .name per generated class
            from google.protobuf import struct_pb2  # noqa: F401
            # Create dynamic reply using generated type at runtime below
            pass

    server = grpc.server(futures.ThreadPoolExecutor(max_workers=2))
    return server


def test_grpc_gateway_basic_flow(client):
    try:
        import grpc  # noqa: F401
        import grpc_tools  # noqa: F401
    except Exception as e:
        pytest.skip(f'Missing gRPC deps: {e}')

    # Create proto via upload and generate server-side stubs
    api_name = f'grpcdemo{int(time.time())}'
    api_version = 'v1'
    pkg = f'{api_name}_{api_version}'
    # Avoid str.format() clashing with proto braces; simple token replace
    proto = PROTO_TEMPLATE.replace('{pkg}', pkg)

    # Upload proto
    files = {'file': ('service.proto', proto.encode('utf-8'), 'application/octet-stream')}
    r = client.post(f'/platform/proto/{api_name}/{api_version}', files=files)
    assert r.status_code == 200, r.text

    # Import generated modules (now on server side for gateway) and start a basic server locally that implements the service
    # We cannot import server-side modules here; instead, weâ€™ll build a tiny local greeter server using python stubs generated by the same proto.
    # Generate local stubs in-memory; fallback skip if generation unavailable in this environment.
    try:
        from grpc_tools import protoc
        import tempfile, pathlib, importlib
        with tempfile.TemporaryDirectory() as td:
            tmp = pathlib.Path(td)
            (tmp / 'svc.proto').write_text(proto)
            out = tmp / 'gen'
            out.mkdir()
            code = protoc.main([
                'protoc', f'--proto_path={td}', f'--python_out={out}', f'--grpc_python_out={out}', str(tmp / 'svc.proto')
            ])
            assert code == 0
            (out / '__init__.py').write_text('')
            import sys
            sys.path.insert(0, str(out))
            pb2 = importlib.import_module('svc_pb2')
            pb2_grpc = importlib.import_module('svc_pb2_grpc')

            import grpc
            from concurrent import futures

            class Greeter(pb2_grpc.GreeterServicer):
                def Hello(self, request, context):
                    return pb2.HelloReply(message=f'Hello, {request.name}!')

            server = grpc.server(futures.ThreadPoolExecutor(max_workers=2))
            pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)
            import socket
            s = socket.socket(); s.bind(('127.0.0.1', 0)); port = s.getsockname()[1]; s.close()
            server.add_insecure_port(f'127.0.0.1:{port}')
            server.start()

            try:
                # Create API pointing to our local grpc server
                r = client.post('/platform/api', json={
                    'api_name': api_name,
                    'api_version': api_version,
                    'api_description': 'gRPC demo',
                    'api_allowed_roles': ['admin'],
                    'api_allowed_groups': ['ALL'],
                    'api_servers': [f'grpc://127.0.0.1:{port}'],
                    'api_type': 'REST',
                    'api_allowed_retry_count': 0,
                    'active': True
                })
                assert r.status_code in (200, 201), r.text

                # Endpoint for POST /grpc
                r = client.post('/platform/endpoint', json={
                    'api_name': api_name,
                    'api_version': api_version,
                    'endpoint_method': 'POST',
                    'endpoint_uri': '/grpc',
                    'endpoint_description': 'grpc'
                })
                assert r.status_code in (200, 201)

                # Subscribe admin
                r = client.post('/platform/subscription/subscribe', json={'api_name': api_name, 'api_version': api_version, 'username': 'admin'})
                assert r.status_code in (200, 201)

                # Call gateway gRPC
                body = {
                    'method': 'Greeter.Hello',
                    'message': {'name': 'Doorman'}
                }
                r = client.post(f'/api/grpc/{api_name}', json=body, headers={'X-API-Version': api_version})
                assert r.status_code == 200, r.text
                data = r.json().get('response', r.json())
                assert data.get('message') == 'Hello, Doorman!'
            finally:
                try:
                    client.delete(f'/platform/endpoint/POST/{api_name}/{api_version}/grpc')
                except Exception:
                    pass
                try:
                    client.delete(f'/platform/api/{api_name}/{api_version}')
                except Exception:
                    pass
                server.stop(0)
    except Exception as e:
        pytest.skip(f'Skipping gRPC due to setup failure: {e}')
import pytest
pytestmark = [pytest.mark.grpc, pytest.mark.gateway]
